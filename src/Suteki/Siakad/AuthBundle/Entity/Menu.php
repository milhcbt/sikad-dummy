<?php
namespace Suteki\Siakad\AuthBundle\Entity;

use ApiPlatform\Core\Annotation\ApiResource;
use Doctrine\ORM\Mapping as ORM;
use Suteki\Siakad\AuthBundle\Repository\MenuRepository;
use  \Doctrine\Common\Collections\ArrayCollection;

/**
* Informasi menu
* @author iman
*  @ORM\Entity(repositoryClass="Suteki\Siakad\AuthBundle\Repository\MenuRepository")
*/
class Menu
{
	/**
	 * @var boolean $active apakah status aktif atau tidak
	 * @ORM\Column(type="boolean")
	 */
	private $active = false;
	/**
	 * @var array $children anak dari menu terkait, jika memilki anak menu harusnya
	 * tidak punya path
	 * @ORM\OneToMany(targetEntity="Menu", mappedBy="parent")
	 */
	private $children;

	/**
	 * @var string $description Deskripsi menu, bisa digunakan untuk menu tooltip, min
	 * = null, max = 100
	 * @ORM\Column(length=100)
	 */
	private $description="";

	/**
	 * @var string $icon relative URL untuk icon yang digunakan menu, min = 0, max =
	 * 255
	 * @ORM\Column(length = 255)
	 */
	private $icon="";
	/**
	 * @var int $id autogenerated  key.
     * @ORM\Id
     * @ORM\Column(type="string")
     * @ORM\GeneratedValue(strategy="UUID")
	 */
	private $id;
	/**
	 * @var int $parent induk dari menu, harus tidak memiliki path, jika sebuah menu
	 * parentnya kosong berarti dia adalah induk utama (paling atas)
	 * @ORM\ManyToOne(targetEntity="Menu", inversedBy="children")
     * @ORM\JoinColumn(name="parent_id", referencedColumnName="id")
	 */
	private $parent;
	/**
	 * @var string $path relative Url untuk menu, min = 0, max = 255, jika kosong
	 * berarti merupakan induk/parent dari menu lain.
	 * @ORM\Column(length = 255)
	 */
	private $path="";
	/**
	 * @var array $roles   role yang dimiliki menu ini
	 * @ORM\ManyToMany(targetEntity="Role", mappedBy="menus")
	 */
	private $roles;
	
	/**
	 * ====================================================
	 * @var string $title Title untuk menu, ini akan menjadi text pada menu, juga
	 * dijadikan acuan pencarian.  Min = 5, Max 20.
	 *  @ORM\Column(length = 20)
	 */
	private $title;	

	function __construct()
	{
        $this->roles = new ArrayCollection();
        $this->children = new ArrayCollection();
	}

	function __destruct()
	{
	}
	
	public function addRole(Role $role){
		$this->roles->add($role);
	}


	function getId(){
		return $this->id;
	}

	function setPath($path){
		$this->path= $path;
	}

	function getPath(){
		return $this->path;
	}

	function setTitle($title){
		$this->title = $title;
	}

	function getTitle(){
		return $this->title;
	}
	function setIcon($icon){
		$this->icon = $icon;
	}

	function getIcon(){
		return $this->icon;
	}

	function setParent($parent){
		$this->parent = $parent;
	}

	function getParent(){
		return $this->parent;
	}

	function setChildren($children){
		$this->children = $children;
	}

	function getChildren(){
		return $this->children;
	}

	public function getRoles(){
		return $this->roles;
	}

	public function getDescription(){
		return $this->description;
	}
	public function setDescription(String $description){
		$this->description = $description;
		return $this;
	}

}
?>
